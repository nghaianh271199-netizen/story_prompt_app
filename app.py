import os
import json
import streamlit as st
from groq import Groq

# üîë L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
client = Groq(api_key=os.getenv("GROQ_API_KEY"))

# ==========================
# H√ÄM G·ªåI GPT/GROQ
# ==========================
def call_gpt(prompt, model="llama-3.1-8b-instant", temperature=0.7):
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            temperature=temperature,
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        st.error(f"L·ªói GPT/Groq: {e}")
        return None


# ==========================
# GIAO DI·ªÜN STREAMLIT
# ==========================
st.title("üìö Story to Image Prompt Generator (Groq API)")

uploaded_file = st.file_uploader("üìÇ T·∫£i file k·ªãch b·∫£n (.txt)", type="txt")

if uploaded_file:
    story_text = uploaded_file.read().decode("utf-8")

    if st.button("üöÄ Ph√¢n t√≠ch v√† sinh prompt"):
        st.info("‚è≥ ƒêang ph√¢n t√≠ch n·ªôi dung...")

        # --------------------------
        # B∆Ø·ªöC 1: T√ìM T·∫ÆT NH√ÇN V·∫¨T
        # --------------------------
        profile_prompt = f"""
        H√£y ph√¢n t√≠ch ƒëo·∫°n truy·ªán sau v√† r√∫t ra h·ªì s∆° nh√¢n v·∫≠t ch√≠nh:
        - T√™n, gi·ªõi t√≠nh, ƒë·ªô tu·ªïi
        - Ngo·∫°i h√¨nh, trang ph·ª•c, t√≠nh c√°ch
        - M·ªëi quan h·ªá ch√≠nh
        Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá theo format sau:
        {{
            "characters": [
                {{
                    "name": "T√™n nh√¢n v·∫≠t",
                    "description": "M√¥ t·∫£ chi ti·∫øt"
                }}
            ]
        }}
        VƒÉn b·∫£n:
        {story_text}
        """

        character_profile = call_gpt(profile_prompt, model="llama-3.1-8b-instant")

        try:
            characters = json.loads(character_profile)
        except:
            st.error("‚ö†Ô∏è GPT tr·∫£ v·ªÅ JSON kh√¥ng h·ª£p l·ªá cho nh√¢n v·∫≠t.")
            st.stop()

        st.success("‚úÖ H·ªì s∆° nh√¢n v·∫≠t ƒë√£ ph√¢n t√≠ch xong.")

        # --------------------------
        # B∆Ø·ªöC 2: CHIA TRUY·ªÜN TH√ÄNH ƒêO·∫†N
        # --------------------------
        split_prompt = f"""
        H√£y chia c√¢u chuy·ªán sau th√†nh c√°c ƒëo·∫°n ng·∫Øn, m·ªói ƒëo·∫°n l√† m·ªôt c·∫£nh.
        Tr·∫£ v·ªÅ JSON h·ª£p l·ªá:
        {{
            "scenes": [
                {{
                    "id": 1,
                    "text": "N·ªôi dung ƒëo·∫°n 1"
                }},
                {{
                    "id": 2,
                    "text": "N·ªôi dung ƒëo·∫°n 2"
                }}
            ]
        }}
        VƒÉn b·∫£n:
        {story_text}
        """

        split_result = call_gpt(split_prompt, model="llama-3.1-8b-instant")

        try:
            scenes = json.loads(split_result)["scenes"]
        except:
            st.error("‚ö†Ô∏è GPT tr·∫£ v·ªÅ JSON kh√¥ng h·ª£p l·ªá khi chia ƒëo·∫°n.")
            st.stop()

        st.success("‚úÖ ƒê√£ chia k·ªãch b·∫£n th√†nh c√°c ƒëo·∫°n nh·ªè.")

        # --------------------------
        # B∆Ø·ªöC 3: T·∫†O PROMPT CHO T·ª™NG ƒêO·∫†N
        # --------------------------
        output_story = []
        output_prompts = []

        for scene in scenes:
            prompt_prompt = f"""
            H√£y vi·∫øt prompt t·∫°o ·∫£nh cho c·∫£nh d∆∞·ªõi ƒë√¢y.
            Y√™u c·∫ßu:
            - B·ªëi c·∫£nh ph·∫£i logic
            - Nh√¢n v·∫≠t ƒë·ªìng nh·∫•t v·ªõi h·ªì s∆° sau: {json.dumps(characters, ensure_ascii=False)}
            - Tr·∫£ v·ªÅ ƒë√∫ng JSON:
            {{
                "id": {scene["id"]},
                "prompt": "M√¥ t·∫£ chi ti·∫øt cho AI v·∫Ω ·∫£nh"
            }}
            
            C·∫£nh: {scene["text"]}
            """

            out = call_gpt(prompt_prompt, model="llama-3.1-70b-versatile")

            try:
                parsed = json.loads(out)
                output_story.append(f"{scene['id']}. {scene['text']}")
                output_prompts.append(f"{parsed['id']}. {parsed['prompt']}")
            except:
                st.warning(f"‚ö†Ô∏è JSON kh√¥ng h·ª£p l·ªá ·ªü ƒëo·∫°n {scene['id']}, b·ªè qua.")

        # --------------------------
        # B∆Ø·ªöC 4: XU·∫§T FILE K·∫æT QU·∫¢
        # --------------------------
        with open("story_scenes.txt", "w", encoding="utf-8") as f:
            f.write("\n\n".join(output_story))

        with open("story_prompts.txt", "w", encoding="utf-8") as f:
            f.write("\n\n".join(output_prompts))

        st.success("üéâ Ho√†n t·∫•t! B·∫°n c√≥ th·ªÉ t·∫£i file k·∫øt qu·∫£ b√™n d∆∞·ªõi:")

        st.download_button("‚¨áÔ∏è T·∫£i file ƒëo·∫°n truy·ªán", data="\n\n".join(output_story),
                           file_name="story_scenes.txt")

        st.download_button("‚¨áÔ∏è T·∫£i file prompts", data="\n\n".join(output_prompts),
                           file_name="story_prompts.txt")
