import streamlit as st
from openai import OpenAI
import os
import json

# Kh·ªüi t·∫°o client (l·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c secrets)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# H√†m g·ªçi GPT v√† lu√¥n c·ªë g·∫Øng tr·∫£ JSON h·ª£p l·ªá
def call_gpt(prompt, model="gpt-4o-mini", temperature=0.7):
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            temperature=temperature
        )
        content = response.choices[0].message.content.strip()

        # N·∫øu GPT tr·∫£ v·ªÅ kh√¥ng ph·∫£i JSON th√¨ th·ª≠ √©p sang JSON h·ª£p l·ªá
        try:
            return json.loads(content)
        except json.JSONDecodeError:
            fix_prompt = f"""
            N·ªôi dung sau kh√¥ng ph·∫£i JSON h·ª£p l·ªá.
            H√£y chuy·ªÉn n√≥ th√†nh JSON ƒë√∫ng c√∫ ph√°p, ch·ªâ tr·∫£ v·ªÅ JSON th√¥i:
            {content}
            """
            fix_response = client.chat.completions.create(
                model=model,
                messages=[{"role": "user", "content": fix_prompt}],
                temperature=0
            )
            fixed_content = fix_response.choices[0].message.content.strip()
            return json.loads(fixed_content)

    except Exception as e:
        st.error(f"L·ªói GPT: {e}")
        return None

# Giao di·ªán Streamlit
st.title("üìñ Story to Prompt Generator")

uploaded_file = st.file_uploader("T·∫£i l√™n file k·ªãch b·∫£n (.txt)", type=["txt"])

if uploaded_file is not None:
    story_text = uploaded_file.read().decode("utf-8")

    if st.button("Ph√¢n t√≠ch v√† sinh prompt"):
        with st.spinner("ƒêang ph√¢n t√≠ch c√¢u chuy·ªán..."):
            split_prompt = f"""
            B·∫°n l√† m·ªôt tr·ª£ l√Ω s√°ng t·∫°o. 
            Nhi·ªám v·ª•: chia n·ªôi dung d∆∞·ªõi ƒë√¢y th√†nh c√°c ƒëo·∫°n nh·ªè logic theo ng·ªØ c·∫£nh,
            v√† t·∫°o prompt ƒë·ªÉ sinh ·∫£nh cho t·ª´ng ƒëo·∫°n.
            Y√™u c·∫ßu:
            - C√°c nh√¢n v·∫≠t ph·∫£i ƒë·ªìng nh·∫•t t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi.
            - B·ªëi c·∫£nh h·ª£p l√Ω, kh√¥ng m√¢u thu·∫´n.
            - Xu·∫•t JSON d·∫°ng:
            {{
              "segments": [
                {{"id": 1, "text": "ƒëo·∫°n truy·ªán", "prompt": "prompt sinh ·∫£nh"}},
                {{"id": 2, "text": "ƒëo·∫°n truy·ªán", "prompt": "prompt sinh ·∫£nh"}}
              ]
            }}

            VƒÉn b·∫£n:
            {story_text}
            """

            result = call_gpt(split_prompt)

            if result:
                st.success("‚úÖ ƒê√£ ph√¢n t√≠ch th√†nh c√¥ng!")

                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                for seg in result.get("segments", []):
                    st.subheader(f"ƒêo·∫°n {seg['id']}")
                    st.write(seg["text"])
                    st.code(seg["prompt"], language="markdown")

                # Xu·∫•t file JSON
                json_str = json.dumps(result, ensure_ascii=False, indent=2)
                st.download_button("‚¨áÔ∏è T·∫£i JSON", data=json_str, file_name="story_segments.json")

                # Xu·∫•t file TXT
                txt_out = ""
                for seg in result.get("segments", []):
                    txt_out += f"ƒêo·∫°n {seg['id']}:\n{seg['text']}\nPrompt: {seg['prompt']}\n\n"
                st.download_button("‚¨áÔ∏è T·∫£i TXT", data=txt_out, file_name="story_segments.txt")
